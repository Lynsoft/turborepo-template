# ----------------------
#  Vite App Dockerfile for Turborepo
#  Usage: docker build -f Dockerfile.vite --build-arg APP_NAME=landing .
# ----------------------

ARG APP_NAME=landing

# ----------------------
#  Dependencies stage
# ----------------------
FROM node:22-alpine AS deps

WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm@10.14.0

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S worker -u 1001

# Copy package files for dependency resolution
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY turbo.json biome.json ./

# Copy package.json files from all workspaces
COPY packages/*/package.json ./packages/*/
COPY apps/*/package.json ./apps/*/

# Copy packages source code (needed for workspace dependencies)
COPY packages ./packages

# Install dependencies
RUN pnpm install --frozen-lockfile || pnpm install

# ----------------------
#  Build stage
# ----------------------
FROM node:22-alpine AS builder

ARG APP_NAME
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@10.14.0

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json
COPY --from=deps /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=deps /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=deps /app/turbo.json ./turbo.json

# Copy source code
COPY packages ./packages
COPY apps ./apps

# Build the specific app and its dependencies
RUN pnpm turbo build --filter=${APP_NAME}

# ----------------------
#  Runtime stage (Nginx for static files)
# ----------------------
FROM nginx:alpine AS runtime

ARG APP_NAME

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp \
    /var/log/nginx \
    /var/run && \
    chown -R nginx:nginx /var/cache/nginx \
    /var/log/nginx \
    /var/run \
    /usr/share/nginx/html && \
    chmod -R 755 /var/cache/nginx \
    /var/log/nginx \
    /var/run

# Copy built Vite app
COPY --from=builder /app/apps/${APP_NAME}/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY <<EOF /etc/nginx/nginx.conf
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    server {
        listen 3000;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Handle client-side routing (SPA)
        location / {
            try_files \$uri \$uri/ /index.html;
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

EXPOSE 3000

USER nginx

CMD ["nginx", "-g", "daemon off;"]
